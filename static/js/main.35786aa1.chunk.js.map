{"version":3,"sources":["components/Weather.js","App.js","index.js"],"names":["Weather","props","weatherData","data","name","country","description","icon","temperature","pressure_mb","uv","humidity","wind","date","className","src","alt","App","state","coords","latitude","longitude","navigator","geolocation","getCurrentPosition","position","newCoods","setState","Axios","get","then","res","location","current","condition","text","temp_c","wind_kph","today","Date","showDate","getMonth","getDate","getFullYear","console","log","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wSAIe,SAASA,EAAQC,GAAQ,IAAD,EAWjCA,EAAMC,YAAYC,KATpBC,EAFmC,EAEnCA,KACAC,EAHmC,EAGnCA,QACAC,EAJmC,EAInCA,YACAC,EALmC,EAKnCA,KACAC,EANmC,EAMnCA,YACAC,EAPmC,EAOnCA,YACAC,EARmC,EAQnCA,GACAC,EATmC,EASnCA,SACAC,EAVmC,EAUnCA,KAEMC,EAASZ,EAAMC,YAAfW,KAER,OACE,iCACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,IAAKR,EAAMS,IAAI,SACpB,gCACE,6BAAKH,IACL,iCACGT,EADH,KACWC,KAEX,+BAAKG,EAAL,YACA,6BAAKF,UAGT,sBAAKQ,UAAU,OAAf,UACI,sBAAKA,UAAU,YAAf,UACI,6BAAKJ,IACL,yCAEJ,sBAAKI,UAAU,YAAf,UACI,+BAAKL,EAAL,IAAkB,yCAClB,+CAEJ,sBAAKK,UAAU,YAAf,UACI,+BAAKH,EAAL,IAAe,wCACf,+CAEJ,sBAAKG,UAAU,YAAf,UACI,+BAAKF,EAAL,IAAW,2CACX,iD,ICiBCK,E,4MAzDbC,MAAQ,CACNC,OAAQ,CACNC,SAAU,EACVC,UAAW,GAEblB,KAAM,GACNU,KAAM,G,kEAIa,IAAD,OACdS,UAAUC,YACZD,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,IAAIC,EAAW,CACbN,SAAUK,EAASN,OAAOC,SAC1BC,UAAWI,EAASN,OAAOE,WAE7B,EAAKM,SAAS,CAAER,OAAQO,IAGxBE,IAAMC,IAAN,2FACsF,EAAKX,MAAMC,OAAOC,SADxG,YACoH,EAAKF,MAAMC,OAAOE,YAClIS,MAAK,SAAAC,GAEL,IAAI7B,EAAc,CAChBE,KAAM2B,EAAI5B,KAAK6B,SAAS5B,KACxBC,QAAS0B,EAAI5B,KAAK6B,SAAS3B,QAC3BC,YAAayB,EAAI5B,KAAK8B,QAAQC,UAAUC,KACxC5B,KAAMwB,EAAI5B,KAAK8B,QAAQC,UAAU3B,KACjCC,YAAauB,EAAI5B,KAAK8B,QAAQG,OAC9B3B,YAAasB,EAAI5B,KAAK8B,QAAQxB,YAC9BC,GAAIqB,EAAI5B,KAAK8B,QAAQvB,GACrBC,SAAUoB,EAAI5B,KAAK8B,QAAQtB,SAC3BC,KAAMmB,EAAI5B,KAAK8B,QAAQI,UAG3B,EAAKV,SAAS,CAACxB,KAAMD,OAIvB,IAAMoC,EAAQ,IAAIC,KAClBC,EAAYF,EAAMG,WAAa,EAAK,MAAQH,EAAMI,UAAY,MAAQJ,EAAMK,cAC5E,EAAKhB,SAAS,CAACd,KAAM2B,OAIvBI,QAAQC,IAAI,mB,+BAKd,OAAO,qBAAK/B,UAAU,MAAf,SACL,cAAC,EAAD,CAASZ,YAAa4C,KAAK5B,c,GArDf6B,aCAlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.35786aa1.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Weather.css\";\r\n\r\n\r\nexport default function Weather(props) {\r\n  const {\r\n    name,\r\n    country,\r\n    description,\r\n    icon,\r\n    temperature,\r\n    pressure_mb,\r\n    uv,\r\n    humidity,\r\n    wind,\r\n  } = props.weatherData.data;\r\n  const { date } = props.weatherData;\r\n\r\n  return (\r\n    <main>\r\n      <div className=\"title\">\r\n        <img src={icon} alt=\"icon\" />\r\n        <div>\r\n          <h3>{date}</h3>\r\n          <span>\r\n            {name}, {country}\r\n          </span>\r\n          <h1>{temperature}ยบ C</h1>\r\n          <h2>{description}</h2>\r\n        </div>\r\n      </div>\r\n      <div className=\"info\">\r\n          <div className=\"each-info\">\r\n              <h2>{uv}</h2>\r\n              <span>UV</span>\r\n          </div>\r\n          <div className=\"each-info\">\r\n              <h2>{pressure_mb} <span>mb</span></h2>\r\n              <span>Pressure</span>\r\n          </div>\r\n          <div className=\"each-info\">\r\n              <h2>{humidity} <span>%</span></h2>\r\n              <span>Humidity</span>\r\n          </div>\r\n          <div className=\"each-info\">\r\n              <h2>{wind} <span>km/h</span></h2>\r\n              <span>Wind</span>\r\n          </div>\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\nimport Axios from \"axios\";\nimport \"./App.css\";\nimport Weather from \"./components/Weather\";\n\nclass App extends Component {\n  state = {\n    coords: {\n      latitude: 0,\n      longitude: 0,\n    },\n    data: {},\n    date: 0,\n  };\n\n  //will run whenever refresh the browser\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => {\n        let newCoods = {\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude,\n        };\n        this.setState({ coords: newCoods });\n\n        //api\n        Axios.get(\n          `https://api.weatherapi.com/v1/current.json?key=7cc511b452fa472fa9f190226210801&q=${this.state.coords.latitude},${this.state.coords.longitude}`\n          ).then(res => {\n          \n            let weatherData = {\n              name: res.data.location.name,\n              country: res.data.location.country,\n              description: res.data.current.condition.text,\n              icon: res.data.current.condition.icon,\n              temperature: res.data.current.temp_c,\n              pressure_mb: res.data.current.pressure_mb,\n              uv: res.data.current.uv,\n              humidity: res.data.current.humidity,\n              wind: res.data.current.wind_kph\n\n            }\n          this.setState({data: weatherData})\n\n        })\n\n        const today = new Date(),\n        showDate = (today.getMonth() + 1) + ' / ' + today.getDate() + ' / ' + today.getFullYear();\n        this.setState({date: showDate})\n\n      });\n    }else{\n      console.log(\"Not Supported\")\n    }\n  }\n\n  render() {\n    return <div className=\"App\">\n      <Weather weatherData={this.state}/>\n    </div>;\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}